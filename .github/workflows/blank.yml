name: Deploy to Alibaba Cloud FC

on:
  push:
    branches: ["dev", "int", "main"]
  pull_request:
    branches: ["main"]

env:
  # 默认环境变量，可在各环境或分支中覆盖
  FC_MEMORY_SIZE: 128
  FC_TIMEOUT: 30
  FC_INTERNET_ACCESS: true

jobs:
  deploy-dev:
    if: github.ref == 'refs/heads/dev'
    name: Deploy to Development
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Checkout repository code
        uses: actions/checkout@v4

      - name: Setup Python environment
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Setup Node.js for Serverless Devs
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Serverless Devs CLI
        run: npm install -g @serverless-devs/s

      - name: Configure Serverless Devs credentials
        run: s config add --AccessKeyID ${{ secrets.DEV_AUTOMATION_AK }} --AccessKeySecret ${{ secrets.DEV_AUTOMATION_SK }} -a default -f

      - name: Debug environment configuration
        run: |
          echo "=== Deployment Environment Variables ==="
          echo "FC_NAME: $FC_NAME"
          echo "FC_REGION: $FC_REGION"
          echo "FC_MEMORY_SIZE: $FC_MEMORY_SIZE"
          echo "FC_TIMEOUT: $FC_TIMEOUT"
          echo "Branch: $GITHUB_REF_NAME"
          echo "Working directory: $PWD"

      - name: Deploy to Development FC
        env:
          FC_NAME: python-function-dev
          FC_REGION: ${{ vars.FC_REGION || 'cn-beijing' }}
          FC_MEMORY_SIZE: ${{ vars.FC_MEMORY_SIZE || '128' }}
          FC_TIMEOUT: ${{ vars.FC_TIMEOUT || '30' }}
          FC_INTERNET_ACCESS: ${{ vars.FC_INTERNET_ACCESS || 'true' }}
        run: s deploy -y -t ./s.yaml

  deploy-int:
    if: github.ref == 'refs/heads/int'
    name: Deploy to Integration
    runs-on: ubuntu-latest
    environment: int
    steps:
      - name: Checkout repository code
        uses: actions/checkout@v4

      - name: Setup Python environment
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Setup Node.js for Serverless Devs
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Serverless Devs CLI
        run: npm install -g @serverless-devs/s

      - name: Configure Serverless Devs credentials
        run: s config add --AccessKeyID ${{ secrets.INT_AUTOMATION_AK }} --AccessKeySecret ${{ secrets.INT_AUTOMATION_SK }} -a default -f

      - name: Deploy to Integration FC
        env:
          FC_NAME: python-function-int
          FC_REGION: ${{ vars.FC_REGION || 'cn-beijing' }}
          FC_MEMORY_SIZE: ${{ vars.FC_MEMORY_SIZE || '128' }}
          FC_TIMEOUT: ${{ vars.FC_TIMEOUT || '30' }}
          FC_INTERNET_ACCESS: ${{ vars.FC_INTERNET_ACCESS || 'true' }}
        run: s deploy -y -t ./s.yaml

  deploy-prod:
    if: github.ref == 'refs/heads/main'
    name: Deploy to Production
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - name: Checkout repository code
        uses: actions/checkout@v4

      - name: Setup Python environment
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Setup Node.js for Serverless Devs
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Serverless Devs CLI
        run: npm install -g @serverless-devs/s

      - name: Configure Serverless Devs credentials
        run: s config add --AccessKeyID ${{ secrets.PROD_AUTOMATION_AK }} --AccessKeySecret ${{ secrets.PROD_AUTOMATION_SK }} -a default -f

      - name: Deploy to Production FC
        env:
          FC_NAME: python-function-prod
          FC_REGION: ${{ vars.FC_REGION || 'cn-beijing' }}
          FC_MEMORY_SIZE: ${{ vars.FC_MEMORY_SIZE || '128' }}
          FC_TIMEOUT: ${{ vars.FC_TIMEOUT || '30' }}
          FC_INTERNET_ACCESS: ${{ vars.FC_INTERNET_ACCESS || 'true' }}
        run: s deploy -y -t ./s.yaml
